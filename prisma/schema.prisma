// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  dateBirth     DateTime?
  city          String?
  university    String?
  preferences   String?
  
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  
  // Opposite relation fields
  publications Publications[] // Add this line
  finances Finances[] // Add this line
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Publications {
  id String @id @default(cuid())
  userId  String
  title  String
  description String
  publicationType String
  publicationDate DateTime
  price Int
  location String
  state String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model Promotions {
  id String @id @default(cuid())
  nameStore String?
  description String?
  typeOfPromotion String?
  startDate DateTime?
  endDate DateTime?
  url String?

}

model Finances {
  id String @id @default(cuid())
  userId String
  financeType String
  concept   String
  amount  Int
  dateFinance DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
}